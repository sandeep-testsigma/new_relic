{"version":3,"file":"index-CE8r2EiY.js","sources":["../../node_modules/@newrelic/browser-agent/src/features/ajax/aggregate/gql.js","../../node_modules/@newrelic/browser-agent/src/features/ajax/aggregate/index.js"],"sourcesContent":["/**\n * Copyright 2020-2025 New Relic, Inc. All rights reserved.\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { isPureObject } from '../../../common/util/type-check'\n\n/**\n * @typedef {object} GQLMetadata\n * @property {string} operationName Name of the operation\n * @property {string} operationType Type of the operation\n * @property {string} operationFramework Framework responsible for the operation\n */\n\n/**\n * Parses and returns the graphql metadata from a network request. If the network\n * request is not a graphql call, undefined will be returned.\n * @param {object|string} body Ajax request body\n * @param {string} query Ajax request query param string\n * @returns {GQLMetadata | undefined}\n */\nexport function parseGQL ({ body, query } = {}) {\n  if (!body && !query) return\n  try {\n    const gqlBody = parseBatchGQL(parseGQLContents(body))\n    if (gqlBody) return gqlBody\n    const gqlQuery = parseSingleGQL(parseGQLQueryString(query))\n    if (gqlQuery) return gqlQuery\n  } catch (err) {\n    // parsing failed, return undefined\n  }\n}\n\n/**\n * @param {string|Object} gql The GraphQL object body sent to a GQL server\n * @returns {GQLMetadata}\n */\nfunction parseSingleGQL (contents) {\n  if (typeof contents !== 'object' || !contents.query || typeof contents.query !== 'string') return\n\n  /** parses gql query string and returns [fullmatch, type match, name match] */\n  const matches = contents.query.trim().match(/^(query|mutation|subscription)\\s?(\\w*)/)\n  const operationType = matches?.[1]\n  if (!operationType) return\n  const operationName = contents.operationName || matches?.[2] || 'Anonymous'\n  return {\n    operationName, // the operation name of the indiv query\n    operationType, // query, mutation, or subscription,\n    operationFramework: 'GraphQL'\n  }\n}\n\nfunction parseBatchGQL (contents) {\n  if (!contents) return\n  if (!Array.isArray(contents)) contents = [contents]\n\n  const opNames = []\n  const opTypes = []\n  for (let content of contents) {\n    const operation = parseSingleGQL(content)\n    if (!operation) continue\n\n    opNames.push(operation.operationName)\n    opTypes.push(operation.operationType)\n  }\n\n  if (!opTypes.length) return\n  return {\n    operationName: opNames.join(','), // the operation name of the indiv query -- joined by ',' for batched results\n    operationType: opTypes.join(','), // query, mutation, or subscription -- joined by ',' for batched results\n    operationFramework: 'GraphQL'\n  }\n}\n\nfunction parseGQLContents (gqlContents) {\n  let contents\n\n  if (!gqlContents || (typeof gqlContents !== 'string' && typeof gqlContents !== 'object')) return\n  else if (typeof gqlContents === 'string') contents = JSON.parse(gqlContents)\n  else contents = gqlContents\n\n  if (!isPureObject(contents) && !Array.isArray(contents)) return\n\n  let isValid = false\n  if (Array.isArray(contents)) isValid = contents.some(x => validateGQLObject(x))\n  else isValid = validateGQLObject(contents)\n\n  if (!isValid) return\n  return contents\n}\n\nfunction parseGQLQueryString (gqlQueryString) {\n  if (!gqlQueryString || typeof gqlQueryString !== 'string') return\n  const params = new URLSearchParams(gqlQueryString)\n  return parseGQLContents(Object.fromEntries(params))\n}\n\nfunction validateGQLObject (obj) {\n  return !(typeof obj !== 'object' || !obj.query || typeof obj.query !== 'string')\n}\n","/**\n * Copyright 2020-2025 New Relic, Inc. All rights reserved.\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { registerHandler } from '../../../common/event-emitter/register-handler'\nimport { stringify } from '../../../common/util/stringify'\nimport { handle } from '../../../common/event-emitter/handle'\nimport { setDenyList, shouldCollectEvent } from '../../../common/deny-list/deny-list'\nimport { FEATURE_NAME } from '../constants'\nimport { FEATURE_NAMES } from '../../../loaders/features/features'\nimport { AggregateBase } from '../../utils/aggregate-base'\nimport { parseGQL } from './gql'\nimport { nullable, numeric, getAddStringContext, addCustomAttributes } from '../../../common/serialize/bel-serializer'\n\nexport class Aggregate extends AggregateBase {\n  static featureName = FEATURE_NAME\n\n  constructor (agentRef) {\n    super(agentRef, FEATURE_NAME)\n    setDenyList(agentRef.runtime.denyList)\n    this.underSpaEvents = {}\n    const classThis = this\n\n    // --- v Used by old spa feature\n    this.ee.on('interactionDone', (interaction, wasSaved) => {\n      if (!this.underSpaEvents[interaction.id]) return\n\n      if (!wasSaved) { // if the ixn was saved, then its ajax reqs are part of the payload whereas if it was discarded, it should still be harvested in the ajax feature itself\n        this.underSpaEvents[interaction.id].forEach((item) => this.events.add(item))\n      }\n      delete this.underSpaEvents[interaction.id]\n    })\n    // --- ^\n    // --- v Used by new soft nav\n    registerHandler('returnAjax', event => this.events.add(event), this.featureName, this.ee)\n    // --- ^\n    registerHandler('xhr', function () { // the EE-drain system not only switches \"this\" but also passes a new EventContext with info. Should consider platform refactor to another system which passes a mutable context around separately and predictably to avoid problems like this.\n      classThis.storeXhr(...arguments, this) // this switches the context back to the class instance while passing the NR context as an argument -- see \"ctx\" in storeXhr\n    }, this.featureName, this.ee)\n\n    this.waitForFlags(([])).then(() => this.drain())\n  }\n\n  storeXhr (params, metrics, startTime, endTime, type, ctx) {\n    metrics.time = startTime\n\n    // send to session traces\n    let hash\n    if (params.cat) {\n      hash = stringify([params.status, params.cat])\n    } else {\n      hash = stringify([params.status, params.host, params.pathname])\n    }\n\n    const shouldCollect = shouldCollectEvent(params)\n    const shouldOmitAjaxMetrics = this.agentRef.init.feature_flags?.includes('ajax_metrics_deny_list')\n    const jserrorsInUse = Boolean(this.agentRef.features?.[FEATURE_NAMES.jserrors])\n\n    // Report ajax timeslice metric (to be harvested by jserrors feature, but only if it's running).\n    if (jserrorsInUse && (shouldCollect || !shouldOmitAjaxMetrics)) {\n      this.agentRef.sharedAggregator?.add(['xhr', hash, params, metrics])\n    }\n\n    if (!shouldCollect) {\n      if (params.hostname === this.agentRef.info.errorBeacon || (this.agentRef.init.proxy?.beacon && params.hostname === this.agentRef.init.proxy.beacon)) {\n        // This doesn't make a distinction if the same-domain request is going to a different port or path...\n        this.reportSupportabilityMetric('Ajax/Events/Excluded/Agent')\n\n        if (shouldOmitAjaxMetrics) this.reportSupportabilityMetric('Ajax/Metrics/Excluded/Agent')\n      } else {\n        this.reportSupportabilityMetric('Ajax/Events/Excluded/App')\n\n        if (shouldOmitAjaxMetrics) this.reportSupportabilityMetric('Ajax/Metrics/Excluded/App')\n      }\n      return // do not send this ajax as an event\n    }\n\n    handle('bstXhrAgg', ['xhr', hash, params, metrics], undefined, FEATURE_NAMES.sessionTrace, this.ee) // have trace feature harvest AjaxNode\n\n    const event = {\n      method: params.method,\n      status: params.status,\n      domain: params.host,\n      path: params.pathname,\n      requestSize: metrics.txSize,\n      responseSize: metrics.rxSize,\n      type,\n      startTime,\n      endTime,\n      callbackDuration: metrics.cbTime\n    }\n\n    if (ctx.dt) {\n      event.spanId = ctx.dt.spanId\n      event.traceId = ctx.dt.traceId\n      event.spanTimestamp = Math.floor(\n        this.agentRef.runtime.timeKeeper.correctAbsoluteTimestamp(ctx.dt.timestamp)\n      )\n    }\n\n    // parsed from the AJAX body, looking for operationName param & parsing query for operationType\n    event.gql = params.gql = parseGQL({\n      body: ctx.body,\n      query: ctx.parsedOrigin?.search\n    })\n    if (event.gql) this.reportSupportabilityMetric('Ajax/Events/GraphQL/Bytes-Added', stringify(event.gql).length)\n\n    const softNavInUse = Boolean(this.agentRef.features?.[FEATURE_NAMES.softNav])\n    if (softNavInUse) { // For newer soft nav (when running), pass the event to it for evaluation -- either part of an interaction or is given back\n      handle('ajax', [event], undefined, FEATURE_NAMES.softNav, this.ee)\n    } else if (ctx.spaNode) { // For old spa (when running), if the ajax happened inside an interaction, hold it until the interaction finishes\n      const interactionId = ctx.spaNode.interaction.id\n      this.underSpaEvents[interactionId] ??= []\n      this.underSpaEvents[interactionId].push(event)\n    } else {\n      this.events.add(event)\n    }\n  }\n\n  serializer (eventBuffer) {\n    if (!eventBuffer.length) return\n    const addString = getAddStringContext(this.agentRef.runtime.obfuscator)\n    let payload = 'bel.7;'\n\n    for (let i = 0; i < eventBuffer.length; i++) {\n      const event = eventBuffer[i]\n      const fields = [\n        numeric(event.startTime),\n        numeric(event.endTime - event.startTime),\n        numeric(0), // callbackEnd\n        numeric(0), // no callbackDuration for non-SPA events\n        addString(event.method),\n        numeric(event.status),\n        addString(event.domain),\n        addString(event.path),\n        numeric(event.requestSize),\n        numeric(event.responseSize),\n        event.type === 'fetch' ? 1 : '',\n        addString(0), // nodeId\n        nullable(event.spanId, addString, true) + // guid\n        nullable(event.traceId, addString, true) + // traceId\n        nullable(event.spanTimestamp, numeric, false) // timestamp\n      ]\n\n      let insert = '2,'\n\n      // Since configuration objects (like info) are created new each time they are set, we have to grab the current pointer to the attr object here.\n      const jsAttributes = this.agentRef.info.jsAttributes\n\n      // add custom attributes\n      // gql decorators are added as custom attributes to alleviate need for new BEL schema\n      const attrParts = addCustomAttributes({ ...(jsAttributes || {}), ...(event.gql || {}) }, addString)\n      fields.unshift(numeric(attrParts.length))\n\n      insert += fields.join(',')\n      if (attrParts && attrParts.length > 0) {\n        insert += ';' + attrParts.join(';')\n      }\n      if ((i + 1) < eventBuffer.length) insert += ';'\n\n      payload += insert\n    }\n\n    return payload\n  }\n}\n"],"names":["parseGQL","body","query","gqlBody","parseBatchGQL","parseGQLContents","gqlQuery","parseSingleGQL","parseGQLQueryString","contents","matches","operationType","opNames","opTypes","content","operation","gqlContents","isPureObject","isValid","x","validateGQLObject","gqlQueryString","params","obj","Aggregate","AggregateBase","FEATURE_NAME","agentRef","setDenyList","classThis","interaction","wasSaved","item","registerHandler","event","metrics","startTime","endTime","type","ctx","hash","stringify","shouldCollect","shouldCollectEvent","shouldOmitAjaxMetrics","FEATURE_NAMES","handle","interactionId","eventBuffer","addString","getAddStringContext","payload","i","fields","numeric","nullable","insert","jsAttributes","attrParts","addCustomAttributes"],"mappings":"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","x_google_ignoreList":[0,1]}