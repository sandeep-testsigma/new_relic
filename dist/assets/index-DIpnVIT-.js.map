{"version":3,"file":"index-DIpnVIT-.js","sources":["../../node_modules/@newrelic/browser-agent/dist/esm/features/ajax/aggregate/gql.js","../../node_modules/@newrelic/browser-agent/dist/esm/features/ajax/aggregate/index.js"],"sourcesContent":["/**\n * Copyright 2020-2025 New Relic, Inc. All rights reserved.\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { isPureObject } from '../../../common/util/type-check';\n\n/**\n * @typedef {object} GQLMetadata\n * @property {string} operationName Name of the operation\n * @property {string} operationType Type of the operation\n * @property {string} operationFramework Framework responsible for the operation\n */\n\n/**\n * Parses and returns the graphql metadata from a network request. If the network\n * request is not a graphql call, undefined will be returned.\n * @param {object|string} body Ajax request body\n * @param {string} query Ajax request query param string\n * @returns {GQLMetadata | undefined}\n */\nexport function parseGQL({\n  body,\n  query\n} = {}) {\n  if (!body && !query) return;\n  try {\n    const gqlBody = parseBatchGQL(parseGQLContents(body));\n    if (gqlBody) return gqlBody;\n    const gqlQuery = parseSingleGQL(parseGQLQueryString(query));\n    if (gqlQuery) return gqlQuery;\n  } catch (err) {\n    // parsing failed, return undefined\n  }\n}\n\n/**\n * @param {string|Object} gql The GraphQL object body sent to a GQL server\n * @returns {GQLMetadata}\n */\nfunction parseSingleGQL(contents) {\n  if (typeof contents !== 'object' || !contents.query || typeof contents.query !== 'string') return;\n\n  /** parses gql query string and returns [fullmatch, type match, name match] */\n  const matches = contents.query.trim().match(/^(query|mutation|subscription)\\s?(\\w*)/);\n  const operationType = matches?.[1];\n  if (!operationType) return;\n  const operationName = contents.operationName || matches?.[2] || 'Anonymous';\n  return {\n    operationName,\n    // the operation name of the indiv query\n    operationType,\n    // query, mutation, or subscription,\n    operationFramework: 'GraphQL'\n  };\n}\nfunction parseBatchGQL(contents) {\n  if (!contents) return;\n  if (!Array.isArray(contents)) contents = [contents];\n  const opNames = [];\n  const opTypes = [];\n  for (let content of contents) {\n    const operation = parseSingleGQL(content);\n    if (!operation) continue;\n    opNames.push(operation.operationName);\n    opTypes.push(operation.operationType);\n  }\n  if (!opTypes.length) return;\n  return {\n    operationName: opNames.join(','),\n    // the operation name of the indiv query -- joined by ',' for batched results\n    operationType: opTypes.join(','),\n    // query, mutation, or subscription -- joined by ',' for batched results\n    operationFramework: 'GraphQL'\n  };\n}\nfunction parseGQLContents(gqlContents) {\n  let contents;\n  if (!gqlContents || typeof gqlContents !== 'string' && typeof gqlContents !== 'object') return;else if (typeof gqlContents === 'string') contents = JSON.parse(gqlContents);else contents = gqlContents;\n  if (!isPureObject(contents) && !Array.isArray(contents)) return;\n  let isValid = false;\n  if (Array.isArray(contents)) isValid = contents.some(x => validateGQLObject(x));else isValid = validateGQLObject(contents);\n  if (!isValid) return;\n  return contents;\n}\nfunction parseGQLQueryString(gqlQueryString) {\n  if (!gqlQueryString || typeof gqlQueryString !== 'string') return;\n  const params = new URLSearchParams(gqlQueryString);\n  return parseGQLContents(Object.fromEntries(params));\n}\nfunction validateGQLObject(obj) {\n  return !(typeof obj !== 'object' || !obj.query || typeof obj.query !== 'string');\n}","/**\n * Copyright 2020-2025 New Relic, Inc. All rights reserved.\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { registerHandler } from '../../../common/event-emitter/register-handler';\nimport { stringify } from '../../../common/util/stringify';\nimport { handle } from '../../../common/event-emitter/handle';\nimport { setDenyList, shouldCollectEvent } from '../../../common/deny-list/deny-list';\nimport { FEATURE_NAME } from '../constants';\nimport { FEATURE_NAMES } from '../../../loaders/features/features';\nimport { AggregateBase } from '../../utils/aggregate-base';\nimport { parseGQL } from './gql';\nimport { nullable, numeric, getAddStringContext, addCustomAttributes } from '../../../common/serialize/bel-serializer';\nexport class Aggregate extends AggregateBase {\n  static featureName = FEATURE_NAME;\n  constructor(agentRef) {\n    super(agentRef, FEATURE_NAME);\n    setDenyList(agentRef.runtime.denyList);\n    this.underSpaEvents = {};\n    const classThis = this;\n\n    // --- v Used by old spa feature\n    this.ee.on('interactionDone', (interaction, wasSaved) => {\n      if (!this.underSpaEvents[interaction.id]) return;\n      if (!wasSaved) {\n        // if the ixn was saved, then its ajax reqs are part of the payload whereas if it was discarded, it should still be harvested in the ajax feature itself\n        this.underSpaEvents[interaction.id].forEach(item => this.events.add(item));\n      }\n      delete this.underSpaEvents[interaction.id];\n    });\n    // --- ^\n    // --- v Used by new soft nav\n    registerHandler('returnAjax', event => this.events.add(event), this.featureName, this.ee);\n    // --- ^\n    registerHandler('xhr', function () {\n      // the EE-drain system not only switches \"this\" but also passes a new EventContext with info. Should consider platform refactor to another system which passes a mutable context around separately and predictably to avoid problems like this.\n      classThis.storeXhr(...arguments, this); // this switches the context back to the class instance while passing the NR context as an argument -- see \"ctx\" in storeXhr\n    }, this.featureName, this.ee);\n    this.waitForFlags([]).then(() => this.drain());\n  }\n  storeXhr(params, metrics, startTime, endTime, type, ctx) {\n    metrics.time = startTime;\n\n    // send to session traces\n    let hash;\n    if (params.cat) {\n      hash = stringify([params.status, params.cat]);\n    } else {\n      hash = stringify([params.status, params.host, params.pathname]);\n    }\n    const shouldCollect = shouldCollectEvent(params);\n    const shouldOmitAjaxMetrics = this.agentRef.init.feature_flags?.includes('ajax_metrics_deny_list');\n    const jserrorsInUse = Boolean(this.agentRef.features?.[FEATURE_NAMES.jserrors]);\n\n    // Report ajax timeslice metric (to be harvested by jserrors feature, but only if it's running).\n    if (jserrorsInUse && (shouldCollect || !shouldOmitAjaxMetrics)) {\n      this.agentRef.sharedAggregator?.add(['xhr', hash, params, metrics]);\n    }\n    if (!shouldCollect) {\n      if (params.hostname === this.agentRef.info.errorBeacon || this.agentRef.init.proxy?.beacon && params.hostname === this.agentRef.init.proxy.beacon) {\n        // This doesn't make a distinction if the same-domain request is going to a different port or path...\n        this.reportSupportabilityMetric('Ajax/Events/Excluded/Agent');\n        if (shouldOmitAjaxMetrics) this.reportSupportabilityMetric('Ajax/Metrics/Excluded/Agent');\n      } else {\n        this.reportSupportabilityMetric('Ajax/Events/Excluded/App');\n        if (shouldOmitAjaxMetrics) this.reportSupportabilityMetric('Ajax/Metrics/Excluded/App');\n      }\n      return; // do not send this ajax as an event\n    }\n    handle('bstXhrAgg', ['xhr', hash, params, metrics], undefined, FEATURE_NAMES.sessionTrace, this.ee); // have trace feature harvest AjaxNode\n\n    const event = {\n      method: params.method,\n      status: params.status,\n      domain: params.host,\n      path: params.pathname,\n      requestSize: metrics.txSize,\n      responseSize: metrics.rxSize,\n      type,\n      startTime,\n      endTime,\n      callbackDuration: metrics.cbTime\n    };\n    if (ctx.dt) {\n      event.spanId = ctx.dt.spanId;\n      event.traceId = ctx.dt.traceId;\n      event.spanTimestamp = Math.floor(this.agentRef.runtime.timeKeeper.correctAbsoluteTimestamp(ctx.dt.timestamp));\n    }\n\n    // parsed from the AJAX body, looking for operationName param & parsing query for operationType\n    event.gql = params.gql = parseGQL({\n      body: ctx.body,\n      query: ctx.parsedOrigin?.search\n    });\n    if (event.gql) this.reportSupportabilityMetric('Ajax/Events/GraphQL/Bytes-Added', stringify(event.gql).length);\n    const softNavInUse = Boolean(this.agentRef.features?.[FEATURE_NAMES.softNav]);\n    if (softNavInUse) {\n      // For newer soft nav (when running), pass the event to it for evaluation -- either part of an interaction or is given back\n      handle('ajax', [event], undefined, FEATURE_NAMES.softNav, this.ee);\n    } else if (ctx.spaNode) {\n      // For old spa (when running), if the ajax happened inside an interaction, hold it until the interaction finishes\n      const interactionId = ctx.spaNode.interaction.id;\n      this.underSpaEvents[interactionId] ??= [];\n      this.underSpaEvents[interactionId].push(event);\n    } else {\n      this.events.add(event);\n    }\n  }\n  serializer(eventBuffer) {\n    if (!eventBuffer.length) return;\n    const addString = getAddStringContext(this.agentRef.runtime.obfuscator);\n    let payload = 'bel.7;';\n    for (let i = 0; i < eventBuffer.length; i++) {\n      const event = eventBuffer[i];\n      const fields = [numeric(event.startTime), numeric(event.endTime - event.startTime), numeric(0),\n      // callbackEnd\n      numeric(0),\n      // no callbackDuration for non-SPA events\n      addString(event.method), numeric(event.status), addString(event.domain), addString(event.path), numeric(event.requestSize), numeric(event.responseSize), event.type === 'fetch' ? 1 : '', addString(0),\n      // nodeId\n      nullable(event.spanId, addString, true) +\n      // guid\n      nullable(event.traceId, addString, true) +\n      // traceId\n      nullable(event.spanTimestamp, numeric, false) // timestamp\n      ];\n      let insert = '2,';\n\n      // Since configuration objects (like info) are created new each time they are set, we have to grab the current pointer to the attr object here.\n      const jsAttributes = this.agentRef.info.jsAttributes;\n\n      // add custom attributes\n      // gql decorators are added as custom attributes to alleviate need for new BEL schema\n      const attrParts = addCustomAttributes({\n        ...(jsAttributes || {}),\n        ...(event.gql || {})\n      }, addString);\n      fields.unshift(numeric(attrParts.length));\n      insert += fields.join(',');\n      if (attrParts && attrParts.length > 0) {\n        insert += ';' + attrParts.join(';');\n      }\n      if (i + 1 < eventBuffer.length) insert += ';';\n      payload += insert;\n    }\n    return payload;\n  }\n}"],"names":["parseGQL","body","query","gqlBody","parseBatchGQL","parseGQLContents","gqlQuery","parseSingleGQL","parseGQLQueryString","contents","matches","operationType","opNames","opTypes","content","operation","gqlContents","isPureObject","isValid","x","validateGQLObject","gqlQueryString","params","obj","Aggregate","AggregateBase","FEATURE_NAME","agentRef","setDenyList","classThis","interaction","wasSaved","item","registerHandler","event","metrics","startTime","endTime","type","ctx","hash","stringify","shouldCollect","shouldCollectEvent","shouldOmitAjaxMetrics","FEATURE_NAMES","handle","interactionId","eventBuffer","addString","getAddStringContext","payload","i","fields","numeric","nullable","insert","jsAttributes","attrParts","addCustomAttributes"],"mappings":"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","x_google_ignoreList":[0,1]}