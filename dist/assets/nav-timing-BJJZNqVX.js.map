{"version":3,"file":"nav-timing-BJJZNqVX.js","sources":["../../node_modules/@newrelic/browser-agent/src/common/timing/nav-timing.js"],"sourcesContent":["/**\n * Copyright 2020-2025 New Relic, Inc. All rights reserved.\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// We don't use JSON.stringify directly on the performance timing data for these reasons:\n// * Chrome has extra data in the performance object that we don't want to send all the time (wasteful)\n// * Firefox fails to stringify the native object due to - http://code.google.com/p/v8/issues/detail?id=1223\n// * The variable names are long and wasteful to transmit\n\n// Add Performance Timing values to the given object.\n// * Values are written relative to an offset to reduce their length (i.e. number of characters).\n// * The offset is sent with the data\n// * 0's are not included unless the value is a 'relative zero'\n//\n\nvar START = 'Start'\nvar END = 'End'\nvar UNLOAD_EVENT = 'unloadEvent'\nvar REDIRECT = 'redirect'\nvar DOMAIN_LOOKUP = 'domainLookup'\nvar ONNECT = 'onnect'\nvar REQUEST = 'request'\nvar RESPONSE = 'response'\nvar LOAD_EVENT = 'loadEvent'\nvar DOM_CONTENT_LOAD_EVENT = 'domContentLoadedEvent'\n\nexport const navTimingValues = []\n\nfunction getPntType (type) {\n  if (typeof type === 'number') return type\n  const types = {\n    navigate: undefined,\n    reload: 1,\n    back_forward: 2,\n    prerender: 3\n  }\n  return types[type]\n}\n\nexport function addPT (offset, pt, v = {}, isL1Api = false) {\n  if (!pt) return\n  v.of = offset\n  handleValue(v.of, v, 'n', true)\n  handleValue(pt[UNLOAD_EVENT + START], v, 'u', isL1Api)\n  handleValue(pt[REDIRECT + START], v, 'r', isL1Api)\n  handleValue(pt[UNLOAD_EVENT + END], v, 'ue', isL1Api)\n  handleValue(pt[REDIRECT + END], v, 're', isL1Api)\n  handleValue(pt['fetch' + START], v, 'f', isL1Api)\n  handleValue(pt[DOMAIN_LOOKUP + START], v, 'dn', isL1Api)\n  handleValue(pt[DOMAIN_LOOKUP + END], v, 'dne', isL1Api)\n  handleValue(pt['c' + ONNECT + START], v, 'c', isL1Api)\n  handleValue(pt['secureC' + ONNECT + 'ion' + START], v, 's', isL1Api)\n  handleValue(pt['c' + ONNECT + END], v, 'ce', isL1Api)\n  handleValue(pt[REQUEST + START], v, 'rq', isL1Api)\n  handleValue(pt[RESPONSE + START], v, 'rp', isL1Api)\n  handleValue(pt[RESPONSE + END], v, 'rpe', isL1Api)\n  handleValue(pt.domLoading, v, 'dl', isL1Api)\n  handleValue(pt.domInteractive, v, 'di', isL1Api)\n  handleValue(pt[DOM_CONTENT_LOAD_EVENT + START], v, 'ds', isL1Api)\n  handleValue(pt[DOM_CONTENT_LOAD_EVENT + END], v, 'de', isL1Api)\n  handleValue(pt.domComplete, v, 'dc', isL1Api)\n  handleValue(pt[LOAD_EVENT + START], v, 'l', isL1Api)\n  handleValue(pt[LOAD_EVENT + END], v, 'le', isL1Api)\n  return v\n}\n\n// Add Performance Navigation values to the given object\nexport function addPN (pn, v) {\n  handleValue(getPntType(pn.type), v, 'ty')\n  handleValue(pn.redirectCount, v, 'rc')\n  return v\n}\n\n/**\n * By side effect, this modifies 'obj' with a mapping of the 'prop' provided to a 'value', and invalid values are not added.\n * On the other hand, the local navTimingValues array gets the value appended if valid and 'undefined' appended if invalid, regardless.\n */\nfunction handleValue (value, obj, prop, isOldApi) {\n  /*\n  For L2 Timing API, the value will already be a relative-to-previous-document DOMHighResTimeStamp.\n  For L1 (deprecated) Timing, the value is an UNIX epoch timestamp, which we will convert to a relative time using our offset.\n  PNT.type is reported as undefined, 1, 2, etc -- note that zero-value properties will be recorded as 'undefined', however DEM interprets undefined \"types\" as \"navigate\"\n  */\n  if (typeof value === 'number' && value > 0) { // note that zero-value properties will be recorded as 'undefined'\n    if (isOldApi) {\n      const offset = obj?.of > 0 ? obj.of : 0 // expect an epoch timestamp, if called by addPT\n      value = Math.max(value - offset, 0)\n    }\n    value = Math.round(value)\n    obj[prop] = value\n    navTimingValues.push(value)\n  } else navTimingValues.push(undefined)\n}\n"],"names":["START","END","UNLOAD_EVENT","REDIRECT","DOMAIN_LOOKUP","ONNECT","REQUEST","RESPONSE","LOAD_EVENT","DOM_CONTENT_LOAD_EVENT","navTimingValues","getPntType","type","addPT","offset","pt","v","isL1Api","handleValue","addPN","pn","value","obj","prop","isOldApi"],"mappings":"AAgBA,IAAIA,EAAQ,QACRC,EAAM,MACNC,EAAe,cACfC,EAAW,WACXC,EAAgB,eAChBC,EAAS,SACTC,EAAU,UACVC,EAAW,WACXC,EAAa,YACbC,EAAyB,wBAEjB,MAACC,EAAkB,CAAA,EAE/B,SAASC,EAAYC,EAAM,CACzB,OAAI,OAAOA,GAAS,SAAiBA,EACvB,CACZ,SAAU,OACV,OAAQ,EACR,aAAc,EACd,UAAW,CACf,EACeA,CAAI,CACnB,CAEO,SAASC,EAAOC,EAAQC,EAAIC,EAAI,CAAA,EAAIC,EAAU,GAAO,CAC1D,GAAKF,EACL,OAAAC,EAAE,GAAKF,EACPI,EAAYF,EAAE,GAAIA,EAAG,IAAK,EAAI,EAC9BE,EAAYH,EAAGb,EAAeF,CAAK,EAAGgB,EAAG,IAAKC,CAAO,EACrDC,EAAYH,EAAGZ,EAAWH,CAAK,EAAGgB,EAAG,IAAKC,CAAO,EACjDC,EAAYH,EAAGb,EAAeD,CAAG,EAAGe,EAAG,KAAMC,CAAO,EACpDC,EAAYH,EAAGZ,EAAWF,CAAG,EAAGe,EAAG,KAAMC,CAAO,EAChDC,EAAYH,EAAG,QAAUf,CAAK,EAAGgB,EAAG,IAAKC,CAAO,EAChDC,EAAYH,EAAGX,EAAgBJ,CAAK,EAAGgB,EAAG,KAAMC,CAAO,EACvDC,EAAYH,EAAGX,EAAgBH,CAAG,EAAGe,EAAG,MAAOC,CAAO,EACtDC,EAAYH,EAAG,IAAMV,EAASL,CAAK,EAAGgB,EAAG,IAAKC,CAAO,EACrDC,EAAYH,EAAG,UAAYV,EAAS,MAAQL,CAAK,EAAGgB,EAAG,IAAKC,CAAO,EACnEC,EAAYH,EAAG,IAAMV,EAASJ,CAAG,EAAGe,EAAG,KAAMC,CAAO,EACpDC,EAAYH,EAAGT,EAAUN,CAAK,EAAGgB,EAAG,KAAMC,CAAO,EACjDC,EAAYH,EAAGR,EAAWP,CAAK,EAAGgB,EAAG,KAAMC,CAAO,EAClDC,EAAYH,EAAGR,EAAWN,CAAG,EAAGe,EAAG,MAAOC,CAAO,EACjDC,EAAYH,EAAG,WAAYC,EAAG,KAAMC,CAAO,EAC3CC,EAAYH,EAAG,eAAgBC,EAAG,KAAMC,CAAO,EAC/CC,EAAYH,EAAGN,EAAyBT,CAAK,EAAGgB,EAAG,KAAMC,CAAO,EAChEC,EAAYH,EAAGN,EAAyBR,CAAG,EAAGe,EAAG,KAAMC,CAAO,EAC9DC,EAAYH,EAAG,YAAaC,EAAG,KAAMC,CAAO,EAC5CC,EAAYH,EAAGP,EAAaR,CAAK,EAAGgB,EAAG,IAAKC,CAAO,EACnDC,EAAYH,EAAGP,EAAaP,CAAG,EAAGe,EAAG,KAAMC,CAAO,EAC3CD,CACT,CAGO,SAASG,EAAOC,EAAIJ,EAAG,CAC5B,OAAAE,EAAYP,EAAWS,EAAG,IAAI,EAAGJ,EAAG,IAAI,EACxCE,EAAYE,EAAG,cAAeJ,EAAG,IAAI,EAC9BA,CACT,CAMA,SAASE,EAAaG,EAAOC,EAAKC,EAAMC,EAAU,CAMhD,GAAI,OAAOH,GAAU,UAAYA,EAAQ,EAAG,CAC1C,GAAIG,EAAU,CACZ,MAAMV,EAASQ,GAAK,GAAK,EAAIA,EAAI,GAAK,EACtCD,EAAQ,KAAK,IAAIA,EAAQP,EAAQ,CAAC,CACxC,CACIO,EAAQ,KAAK,MAAMA,CAAK,EACxBC,EAAIC,CAAI,EAAIF,EACZX,EAAgB,KAAKW,CAAK,CAC9B,MAASX,EAAgB,KAAK,MAAS,CACvC","x_google_ignoreList":[0]}